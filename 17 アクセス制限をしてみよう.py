# さて、次はクラスの変数やメソッドにアクセス制限をつける方法について見ていきましょう。
# ただ Python では他の言語にあるような private、protected などの仕組みはなくて、慣習的にこう書きましょう、というルールだけがあるので、そのあたりを見ていきたいと思います。
# では今回、こちらの name 属性にはクラスの外からはアクセスしてほしくないというケースを考えてみましょう。
# つまり、こちらのクラス内では使ってはいいけれど、クラスの外では使ってほしくないという場合ですね。
# その場合は、変数名の前にアンダースコアをつけると、「これは外からアクセスしないでね」という意味になります。
# なので、例えば tom._name といった形ですね。
# ただ、これは単なる慣習的なお約束なので、実際に実行してみるとアクセスできてしまっているのがわかるかと思います。
# そこで、さらに厳密にしたい場合の方法も実はあって、その場合はアンダースコア 1 つではなく、アンダースコア 2 つにするというルールがあったりします。
# こちらでもう 1 度実行してみると…こうですね、今度はアクセスできなくなっているのがわかるかと思います。
# ただ、これもある特殊な仕組みを使っているだけで、実は tom._User__name のように「_クラス名__属性名」とすると、実はアクセスできてしまいます。
# こうですね、アクセスできているのがわかるかと思います。
# 実際は厳密にはアクセスを禁止する方法はないのですが、こういうルールがあることを覚えておきましょう。

# クラス
# アクセス制限

class User:  # クラス名は頭文字大文字
    def __init__(self, name):
        self.__name = name
    # インスタンスメソッド
    def say_hi(self):
        print("hi {0}".format(self.__name))



tom = User("tom")  # インスタンスを生成している
# print(tom.__name)
print(tom._User__name)
tom.say_hi()
