# さて、続きをやっていきましょう。
# User 関連のコードに戻しておきました。
# 今回はモジュールについて見ていきましょう。
# これはファイルを分割していくための仕組みですが、例を見ていきます。
# 今 User 関連のクラスが少し長くなってきたので、別ファイルで管理したくなったとしましょう。
# その場合、例えば user.py というファイルを作ってあげて、そちらにコードを移動させてあげます。
# では User 関連のクラスをこのように移動させてあげましょう。
# このように別ファイルに書いたコードをモジュールと呼ぶので、覚えておいてください。
# 次にこのモジュールを読み込むには、myapp.py のほうで「import user」（import モジュール名）としてあげてください。
# 拡張子の .py はいりません。
# あとは読み込んだクラスや関数をモジュール名をつけて使ってあげれば OK です。
# user.AdminUser("bob", 23) のような感じですね。
# それから、import で読み込んだ瞬間に user.py が実行されてしまうことも覚えておきましょう。
# 例えばこのあたりに print() があったりすると実行されてしまうので、注意しておいてください。
# では実行してあげると…こうですね、一番最初に hello と出て、その後は普通に実行されているのがわかるかと思います。
# それから、モジュールから指定した関数やクラスだけを読み込むこともできたりします。
# 例えば AdminUser だけを使いたい場合は、「from user import AdminUser」（from モジュール名 import クラス/関数名）と書いてあげます。
# この場合、AdminUser を使うときにモジュール名は指定する必要はないので、それも覚えておきましょう。
# では実行してあげると…こうですね、うまくいっています。
# ちなみにこの状態だと AdminUser しか読み込まれていないので、User を使おうとするとエラーになってしまうはずです。
# 実行してあげると…こうですね、User は定義されていないよと言われています。
# ここで、複数のクラスを指定して読み込むにはカンマ区切りにしてあげればいいので…、例えば from user import AdminUser, User としてあげてください。
# これで試してみると…こうですね、今度はエラーがなくなりました。
# このようなモジュールの使い方にも慣れておいてください。

# モジュール

# import user #モジュール名(ファイル名=ここではuser.pyを読み込んでいる)

from user import AdminUser, User # from モジュール名 import クラス名orメソッド名でそのクラスorメソッドのみをインポートする
# カンマ区切りで複数インポート可能


# bob = user.AdminUser("bob", 23) # 変数名 = モジュール名.クラス名(引数)でインスタンス生成
bob = AdminUser("bob", 23) # 変数名 = クラス名(引数)でインスタンス生成 ： from モジュール名 import クラス名orメソッド名でそのクラスorメソッドのみをインポートした場合
tom = User("tom") # AdminUser しかインポートしてない場合、エラーになる

print(bob.name)
bob.say_hi()
bob.say_hello()
