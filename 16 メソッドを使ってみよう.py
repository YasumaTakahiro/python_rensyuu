# さて、続きをやっていきましょう。
# クラスなのですが、コンストラクタ以外にも関数を定義することができて、クラスに定義した関数をメソッドというので、まずは用語としておさえておいてください。
# コンストラクタもメソッドの一種になります。
# メソッドにはいくつかの種類があるのですが、今回はインスタンス変数に紐付いたインスタンスメソッド、それからクラスに紐付いたクラスメソッドについて見ていきましょう。
# まずはインスタンスメソッドを作ってみたいと思います。
# では今回 def say_hi(self): として、name の値を表示してみます。
# 引数には self を与えてあげてください。
# そうするとこのクラスのインスタンスの値が使えるので、print( .... ) としてあげて、hi で name を表示したいので、"hi {0}".format(self.name) としてあげれば OK ですね。
# ではこちらで試してみましょう。
# tom.say_hi()、それから bob.say_hi() としてあげます。
# では実行してあげると…こうですね、想定通りになっています。
# では次にクラスメソッドを見ていきましょう。
# クラスメソッドの場合は、デコレーターというのですが…、@classmethod というおまじないをつけてあげてください。
# 今回ですが、def show_info(cls): としてあげます。
# 引数にはこのクラス自身である cls という特殊なキーワードを与えてあげてください。
# せっかくなので、インスタンスの数を表示してあげましょう。
# クラスには cls でアクセスできるので、"{0} instances".format(cls.count) としてあげれば OK かと思います。
# クラスメソッドはインスタンス化せずに使えるので、User.show_info() とすれば OK ではないでしょうか…。
# ではこれで見てあげると…こうですね、想定通りになっています。
# このあたりのメソッドの作り方にも慣れておいてください。

# クラス
# 関数 (メソッド= クラスに定義した関数のこと)
class User:  # クラス名は頭文字大文字
    count = 0
    def __init__(self, name,age):
        User.count +=1
        self.name = name
        self.age =age
    # インスタンスメソッド
    def say_hi(self):
        print("hi {0}".format(self.name))

    # クラスメソッド
    @classmethod
    def show_info(cls):
        print("{0} instances".format(cls.count))


# print(User.count)
tom = User("tom", 20)  # インスタンスを生成している
bob = User("bob", 20)

tom.say_hi()    #インスタンス名.メソッド名で インスタンスメソッドを呼び出している
bob.say_hi()


User.show_info() #クラス名.メソッド名で、クラスメソッドを呼び出している
