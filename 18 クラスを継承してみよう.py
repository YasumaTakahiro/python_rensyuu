# さて、続きをやっていきましょう。
# 次はクラスの継承について見ていきます。
# これは既存のクラスをもとに新しいクラスを作るための仕組みですね。
# では今回、User クラスをもとに AdminUser クラスを作ってみます。
# その際に、こちらのもととなるクラスを親クラスもしくはスーパークラス、そこから作られるクラスを子クラス、サブクラスといったりするので、用語として覚えておいてください。
# では User クラスをもとに AdminUser クラスを作っていきましょう。
# User クラスを継承するには、括弧の中にそのクラスを入れてあげれば OK です。
# ではせっかくなので、独自の変数とメソッドを追加してみましょう。
# まずインスタンス変数を追加したいのですが、今回インスタンスは bob にしてあげて、AdminUser には name に加えて age も渡してあげましょう。
# bob = AdminUser("bob", 23) といった形ですね。
# これらはコンストラクタで受け取ればいいので、コピーしてあげて、age を加えてあげましょう。
# name のほうは親クラスのコンストラクタを使って設定してあげます。
# 親クラスは super() というキーワードで表現できるので、super().__init(name)__ としてあげれば OK でしょう。
# あとは self.age = age とすれば OK ですね。
# 次に独自のメソッドを追加してみましょう。
# では say_hi() をコピーしてあげて、こちらで say_hello() というメソッドにしてあげます。
# メッセージも hello に変えてあげて、せっかくなので age も表示してみましょう。
# ではこちらで self.age も加えてみたいと思います。
# ではこれでうまくいったかどうか実行してみましょう。
# print(bob.name) としてあげて、bob.say_hi() と bob.say_hello() が使えるはずなので、ここで見ていきます。
# では実行してあげると…こうですね、ちゃんと継承できているのがわかるかと思います。
# それから、親クラスのメソッドを上書きすることもできたりします。
# これをメソッドのオーバーライドというので、用語として覚えておいてください。
# では（say_hi() を）こちらのほうにコピーしてあげて、区別ができるように [admin] とつけてあげましょう。
# ではこれで実行してみましょう。
# こうですね、ちゃんと say_hi() の結果が変わっているのがわかると思います。
# このあたりもおさえておいてください。
# では続きは次回にしていきます。


# クラス
# User ->Adminuser


class User:  # クラス名は頭文字大文字
    def __init__(self, name):
        self.name = name

    # インスタンスメソッド
    def say_hi(self):
        print("hi {0}".format(self.name))


class AdminUser(User):
    def __init__(self, aaa, age):
        super().__init__(aaa)
        self.age = age

    def say_hello(self):
        print("hello {0} ({1})".format(self.name, self.age))


bob = AdminUser("bob", 23)
print(bob.name)
bob.say_hi()
bob.say_hello()
