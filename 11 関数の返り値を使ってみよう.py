# さて、続きをやっていきましょう。
# ちょっとシンプルな形に戻しておきました。
# 関数なのですが、何らかの値を返したい場合があります。
# その場合について見ていきましょう。
# では hi と表示するのではなくて、hi という文字列を返したかったとします。
# その場合なのですが return "hi" としてあげれば OK です。
# なお、return した場合は、それ以降の処理が無視されるので注意しておいてください。
# 例えばこの後に print("hello") とすると、これは表示されないはずです。
# では、この関数を実行すると値が返ってくるので msg で受けてあげて、それを print してみましょう。
# では実行してあげると…こうですね、hi が表示されていて hello の方は表示されていないのがわかるかと思います。
# それから関数の中身が何もなかった場合、もしくは後で書くので何か書いておきたい場合は pass というキーワードが使えます。
# どうなるかというと…、このように書けば OK ですね。
# こういうコードもたまに見るので、意味がわかるようにしておきましょう。
# それから pass で何もしなかったり、return で値を返さなかった場合は、None という特殊な値が返ってきます。
# ちょっと見てみましょう…、これを実行してあげると、こうですね、None となっています。
# このあたりの動作についても理解しておいてください。

# 関数

def say_hi():
    # print("hi")
    return "hi"
    print("hello")  # 実行されない


msg = say_hi()
print(msg)

def say_hi2():
    pass #何もしない時、後で実装するときに書く （戻り値はNoneになる）
    # # print("hi")
    # return "hi"
    # print("hello")  # 実行されない


msg = say_hi2()
print(msg)
