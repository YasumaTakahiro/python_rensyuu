# さて、続きをやっていきましょう。
# 次は複数のデータを扱うために Python が用意しているデータ型について見ていきましょう。
# いくつか種類があるのですが、最初はリスト型とタプル、次が集合型、そして次が辞書型になります。
# リスト型とタプルは順序付きのデータ型、集合型は順序なし、なおかつ重複を許さないデータ型、辞書型はキーと値でデータを管理していく型になるので見ていきましょう。
# では今回はリスト型について見ていきます。
# 例を見ていきましょう。
# リストなのですが、[] の中に要素を , 区切りで並べていけば OK です。
# 今回 scores という変数を用意してあげて、40 点と 50 点といった具合にしてみましょう。
# それぞれの要素へのアクセスなのですが、順序付きなので変数名の後に順番を付けてあげれば OK です。
# 順番なのですが、0 から始まる点に注意しておいてください。
# scores[0] とすると 40 が出てくるはずです。
# それから要素を書き換えるには同じようにしてあげればよくて、例えば要素の 0 番目を 45 点にしたい場合は scores[0] = 45 としてあげてください。
# それから要素の個数を調べるには len という命令が使えます。
# print(len(scores)) とすると 2 個と出てくるはずです。
# それから要素を末尾に追加するには append という命令を使ってあげてください。
# 例えば scores.append(100) とすると、最後に 100 が追加されるはずです。
# では print(scores) で確認してみましょう。
# …こうですね、想定通りになっています。
# 他にもいろいろな命令があるのですが、まずはこのあたりを押さえておくといいでしょう。
# それから for と組み合わせる方法についても見ておきましょう。
# 単に表示させたいなら、 for score in scores: としてあげて、 print(score) とすると、それぞれの要素を表示してくれるはずです。
# …こうですね、うまくいっています。
# もしくは、何番目の要素かも取り出したい場合には、enumerate という命令を使えば OK です。
# for i（何番目か）, score（内容） in enumerate(scores) とすると、何番目かも取り出してくれるので print で両方表示してみましょう。
# では print("{0}: {1}".format(i, score)) としてあげます。
# こうすると…、こうですね、うまくいっています。
# こうしたテクニックも覚えておくといいでしょう。

# リスト型とタプル
# 集合型
# 辞書型

# リスト型

scores =[40, 50]
# print(scores[0]) # 40
# scores[0] = 45
# print(len(scores)) #2
# scores.append(100) #最後に100を追加する
# print(scores)

for score in scores:
    print((score))

# enumerate関数を使うと、要素のインデックスと要素を同時に取り出す事が出来ます。
# for 変数1, 変数2 in enumerate(リスト):
#   print(‘{0}:{1}’.format(変数1, 変数2))

for i, score in enumerate(scores):
    print(("{0}: {1}".format(i,score)))

