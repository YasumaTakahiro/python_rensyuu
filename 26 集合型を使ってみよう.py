# さて、次はセットについて見ていきましょう。
# リストやタプルは順序付きのデータを扱うものでしたが、セットは順番がなくて、そして重複を許さないデータ構造になります。
# 例を見ていきましょう。
# では今回、単純に a というセットを作ってみます。
# セットを作るには a = set([]) としてあげて [] の中に要素を入れていくか、もしくはもっとシンプルに a = {} で要素を並べていけば OK です。
# ここで、セットでは重複が許されないので、最後の 5 は無視されるはずです。
# あとで確認するとして、とりあえず print(a) としておきましょう。
# それから、リストと違って順番を持たないので、何番目の要素といったアクセスの仕方ができません。
# 代わりに、その要素があるかないかは in という命令で調べることができます。
# 例えば print(5 in a) とすると、5 があるかないか調べてくれて、真偽値を返してくれます。
# それから要素の追加や削除は add() や remove() を使えば OK です。
# 例えば 2 を追加したかったら a.add(2) のようにしてあげて、逆に 3 を削除したかったら a.remove(3) のようにすれば OK です。
# あとで確認したいので print(a) しておきましょう。
# それから要素の数ですが、リストなどと同じく len() を使えば OK ですね。
# では print(len(a)) のようにしてあげればいいのではないでしょうか。
# ではこちらのほうで実行してみましょう…こうですね、ちゃんと想定通りになっているのがわかるかと思います。
# それから、セットは集合演算を行うこともできます。
# 例を出していきましょう。
# では a = {1, 3, 5, 8} で、 b = {3, 5, 8, 9} だったとしましょう。
# その時に和集合を求めたい場合は print(a | b) としてあげてください。
# 積集合の場合は（ print(a & b) で） & ですね。
# 差集合の場合は（ print(a - b) で） - を使えば OK です。
# では見てあげると…こうですね、想定通りになっています。
# このあたりの操作にも慣れておきましょう。


# リスト型とタプル
# 集合型
# 辞書型

# セット
# a = set([5,4,8,5])
a = {5, 3, 8, 5}
print(a)
print(5 in a)  # True
a.add(2)
a.remove(3)
print(a)
print(len(a))

a = {1, 3, 5, 8}
b = {3, 5, 8, 9}
print("{0}はaとbの和集合です".format(a | b))
print("{0}はaとbの積集合です".format(a & b))
print("{0}はaとbの差集合です".format(a - b))
print("{0}はbとaの差集合です".format(b - a))
